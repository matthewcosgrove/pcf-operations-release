meta:
  repo_uri: (( param "Please provide repo_uri" ))
  git_tag: (( param "Please provise git_tag" ))
  git_private_key: (( param "Please provide git_private_key" ))
  ci_docker_image: (( param "Please provide ci_docker_image" ))
  ci_docker_image_tag: (( param "Please provide ci_docker_tag" ))

  testflight_vcenter_user: (( param "Please provide testflight vcenter user" ))
  testflight_vcenter_password: (( param "Please provide testflight vcenter password" ))
  minio_access_key: (( param "Please provide minio_access_key" ))
  minio_secret_key: (( param "Please provide minio_secret_key" ))
  minio_ip: (( param "Please provide minio_ip" ))
  minio_url: (( concat "http://" meta.minio_ip ":9001" ))

  task_image:
    type: docker-image
    source:
      repository: (( grab meta.ci_docker_image ))
      tag: (( grab meta.ci_docker_image_tag ))  

groups:
- name: testflight-dependencies
  jobs:
  - deploy-testflight-opsman

jobs:
- name: deploy-testflight-opsman
  serial: true
  plan:
  - get: platform-automation-image
    resource: platform-automation
    params:
      globs: ["*image*.tgz"]
      unpack: true
  - get: platform-automation-tasks
    resource: platform-automation
    params:
      globs: ["*tasks*.zip"]
      unpack: true
  - get: config
  - task: check-opsman-via-pivotal-platform-automation-prerequisites------pivnet
    config:
      platform: linux
      image_resource: (( grab meta.task_image ))
      params:
        PIVNET_TOKEN: "((pivnet-refresh-token))"
      run:
        path: sh
        args:
        - -ec
        - |
          set -eu
          curl -f -i -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Token $PIVNET_TOKEN" -X GET https://network.pivotal.io/api/v2/authentication
  - task: check-opsman-via-pivotal-platform-automation-prerequisites------s3
    config:
      platform: linux
      image_resource: (( grab meta.task_image ))
      params:
        MINIO_ACCESS_KEY: (( grab meta.minio_access_key ))
        MINIO_SECRET_KEY: (( grab meta.minio_secret_key ))
        MINIO_URL: (( grab meta.minio_url ))
      run:
        path: sh
        args:
        - -ec
        - |
          : "${MINIO_URL:? MINIO_URL must be set }"
          : "${MINIO_ACCESS_KEY:? MINIO_ACCESS_KEY must be set }"
          : "${MINIO_SECRET_KEY:? MINIO_SECRET_KEY must be set }"

          set -eu
          mc config host add minio ${MINIO_URL} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}
          mc --debug ls minio
  - task: check-opsman-via-pivotal-platform-automation-prerequisites------vcenter connectivity
    config:
      platform: linux
      image_resource: (( grab meta.task_image ))
      params:
        GOVC_URL: ((testflight_vcenter_ip))
        GOVC_DATACENTER: ((testflight_vcenter_datacenter))
        GOVC_USERNAME: (( grab meta.testflight_vcenter_user ))
        GOVC_PASSWORD: (( grab meta.testflight_vcenter_password ))
      run:
        path: bash
        args:
        - -ec
        - |
          set -eu
          : "${GOVC_URL:? GOVC_URL must be set }"
          : "${GOVC_DATACENTER:? GOVC_DATACENTER must be set }"
          : "${GOVC_USERNAME:? GOVC_USERNAME must be set }"
          : "${GOVC_PASSWORD:? GOVC_PASSWORD must be set }"

          export GOVC_INSECURE=true

          RED='\033[0;31m'
          GREEN='\033[0;32m'
          NO_COLOR='\033[0m'

          env | grep -v 'GOVC_PASSWORD' | grep 'GOVC_'
          printf "\n"
          result=1

          set +e
          printf "Testing vCenter connectivity...\n"
          govc about
          if [[ $? -ne 0 ]]; then
            printf "${RED}Failed!${NO_COLOR}\n\n"
            let result=0
          else
            printf "${GREEN}OK.${NO_COLOR}\n\n"
          fi
          set -e

          #Datacenter
          set +e
          printf "Checking existence of datacenter $GOVC_DATACENTER...\n"
          govc datacenter.info $GOVC_DATACENTER
          if [ $? -ne 0 ]; then
            printf "${RED}Failed!${NO_COLOR}\n\n"
            let result=0
          else
            printf "${GREEN}OK.${NO_COLOR}\n\n"
          fi
          set -e

          if [ $result -eq 1 ]; then
            printf "${GREEN}Success!${NO_COLOR}\n"
          else
            printf "${RED}One or more checks failed! :(${NO_COLOR}\n"
            exit 1
          fi


  - task: check-task-yml
    config:
      platform: linux
      image_resource: (( grab meta.task_image ))
      inputs:
      - name: platform-automation-tasks
      run:
        path: sh
        args:
        - -ec
        - |
          cat platform-automation-tasks/tasks/credhub-interpolate.yml
          cat platform-automation-tasks/tasks/credhub-interpolate.sh
          ls -la platform-automation-tasks/tasks/
          cat platform-automation-tasks/tasks/download-product.yml
          cat platform-automation-tasks/tasks/download-product.sh
          cat platform-automation-tasks/tasks/create-vm.yml
          cat platform-automation-tasks/tasks/create-vm.sh
  - task: interpolate-env-creds
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub_username))
      CREDHUB_SECRET: ((credhub_password))
      CREDHUB_SERVER: ((credhub_url))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      PREFIX: '/concourse/main'
      INTERPOLATION_PATHS: config
      SKIP_MISSING: true
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: interpolated-config
  - task: check-interpolated-config
    config:
      platform: linux
      image_resource: (( grab meta.task_image ))
      inputs:
      - name: interpolated-config
      run:
        path: sh
        args:
        - -ec
        - |
          cat interpolated-config/config/*
  - task: remove-testflight-opsman-if-exists
    config:
      platform: linux
      image_resource: (( grab meta.task_image ))
      params:
        GOVC_URL: ((testflight_vcenter_ip))
        GOVC_DATACENTER: ((testflight_vcenter_datacenter))
        GOVC_USERNAME: (( grab meta.testflight_vcenter_user ))
        GOVC_PASSWORD: (( grab meta.testflight_vcenter_password ))
      inputs:
      - name: interpolated-config
      run:
        path: bash
        args:
        - -ec
        - |
          set -eu
          : "${GOVC_URL:? GOVC_URL must be set }"
          : "${GOVC_DATACENTER:? GOVC_DATACENTER must be set }"
          : "${GOVC_USERNAME:? GOVC_USERNAME must be set }"
          : "${GOVC_PASSWORD:? GOVC_PASSWORD must be set }"

          export GOVC_INSECURE=true
          opsman_ip=$(bosh int --path=/opsman-configuration/vsphere/private_ip interpolated-config/config/opsman.yml)
          echo "Starting opsman removal if exists for $opsman_ip"
          set +e
          govc vm.info --vm.ip $opsman_ip 
          govc vm.destroy --vm.ip $opsman_ip 
          set -e
          echo "Completed opsman removal if exists for $opsman_ip"
  - task: download-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: config/download-ops-manager.yml
    input_mapping:
      config: interpolated-config
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    params:
      OPSMAN_CONFIG_FILE: config/opsman.yml
    input_mapping:
      config: interpolated-config
      state: config
      image: downloaded-product
    ensure:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: config
            file-source: generated-state
          output_mapping:
            repository-commit: config-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: state.yml
            GIT_AUTHOR_NAME: "Platform Automation Bot"
            COMMIT_MESSAGE: 'Update state file'
        - put: config
          params:
            repository: config-commit
            merge: true

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
resources:
- name: platform-automation
  type: pivnet
  source:
    product_slug: platform-automation
    api_token: ((pivnet-refresh-token))
- name: config
  type: git
  source:
    uri: (( grab meta.repo_uri ))
    private_key: (( grab meta.git_private_key ))
    branch: master
